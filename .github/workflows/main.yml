
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
    build-test:
      runs-on: ubuntu-latest
      env:
          APPNAME: "movie-list-app"
          ENVIRONMENT: "development"
          DB_CONNECTIONSTRING: "jdbc:mysql://movie-app-db:3306/my_movies_db?useUnicode=true&characterEncoding=UTF8&serverTimezone=America/Chicago&maxReconnects=3&useLegacyDatetimeCode=true"
          DB_CLASS: "com.mysql.cj.jdbc.Driver"
          DB_DRIVER: "MySQL"
          DB_BUNDLENAME: "com.mysql.cj"
          DB_BUNDLEVERSION: "8.0.19"
          OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      services:
        # Label used to access the service container
        movie-app-db:
          # Docker Hub image
          image: mysql:latest
          # Provide the password for postgres
          env:
              MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
              MYSQL_USER: ${{ secrets.DB_USER }}
              MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
              MYSQL_DATABASE: my_movies_db
          ports:
            - 3306:3306
          # Set health checks to wait until mysql has started
          options: --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 10

      steps:
      - name: Checkout
        uses: actions/checkout@v2

      -
        # we need qemu and buildx so we can build multiple platforms later
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0

      -
        # BuildKit (used with `docker buildx`) is the best way to build images
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      -
        # This makes image builds fast!
        name: Cache Docker layers
        uses: actions/cache@v2.1.6
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      -
        name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3.4.1
        with:
          # list of Docker images to use as base name for tags
          images: |
            jsteinshouer/movie-app
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest

      -
        # this will build the images, once per platform
        name: Build image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          target: prod
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          # don't push, only build
          load: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: List images
        run: docker image ls

      - name: Install testbox
        run: docker run -v $PWD/api/testbox:/app/testbox foundeo/cfml-ci-tools box install testbox@4

      - name: Run the application image
        run: |
          docker run \
            --name movie-app \
            --network ${{ job.services.movie-app-db.network }} \
            -p 8080:8080 \
            -e APPNAME=${APPNAME} \
            -e ENVIRONMENT=${ENVIRONMENT} \
            -e DB_CONNECTIONSTRING=${DB_CONNECTIONSTRING} \
            -e DB_CLASS=${DB_CLASS} \
            -e DB_BUNDLENAME=${DB_BUNDLENAME} \
            -e DB_BUNDLEVERSION=${DB_BUNDLEVERSION} \
            -e DB_USER=${DB_USER} \
            -e DB_PASSWORD=${DB_PASSWORD} \
            -e OMDB_API_KEY=${OMDB_API_KEY} \
            -v $PWD/api/tests:/app/tests \
            -v $PWD/api/testbox:/app/testbox \
            --health-cmd "curl -f http://localhost:8080/healthcheck || exit 1" \
            --health-interval 10s \
            --health-timeout 5s \
            --health-retries 5 \
            -d \
            jsteinshouer/movie-app:latest

      - name: Wait for application to be available
        run: sh ./scripts/healthcheck.sh movie-app

      - name: Execute API tests
        run: |
          docker run \
          --rm \
          --network ${{ job.services.movie-app-db.network }} \
          foundeo/cfml-ci-tools \
          box testbox run http://movie-app:8080/tests/_run.cfm

      - name: Execute Cypress e2e tests
        run: |
          docker run \
          --rm \
          --network ${{ job.services.movie-app-db.network }} \
          -v $PWD/app:/e2e \
          -w /e2e \
          cypress/included:8.6.0 \
          cypress run --config baseUrl=http://movie-app:8080,video=false

      - name: Remove container
        run: docker rm movie-app -f
      
      - 
        name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          target: prod
          platforms: linux/amd64,linux/arm64
          builder: ${{ steps.buildx.outputs.name }}
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
    deploy:
      name: "Deploy"
      runs-on: ubuntu-latest
      if: github.event_name == 'push'
      needs: builds-test
      steps:
        - name: Configure SSH
          run: |
            mkdir -p ~/.ssh/
            echo "$SSH_KEY" > ~/.ssh/deploy.key
            chmod 600 ~/.ssh/deploy.key
            cat >>~/.ssh/config <<END
            Host prod
              HostName $SSH_HOST
              User $SSH_USER
              IdentityFile ~/.ssh/deploy.key
              StrictHostKeyChecking no
            END
          env:
            SSH_USER: ${{ secrets.DEPLOY_SSH_USER }}
            SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
            SSH_HOST: ${{ secrets.DEPLOY_SSH_HOST }}

        - name: Trigger a service update
          run: ssh staging 'docker service update --force movie-app'