name: Publish release to Dockerhub and trigger a deployment
# Build a cross-platform image and deploy on release using a semver tag
on:
  push:
    tags:
      - "v*.*.*"

jobs:
    build-push:
      runs-on: ubuntu-latest
      steps:
      - name: Checkout
        uses: actions/checkout@v2

      -
        # we need qemu and buildx so we can build multiple platforms later
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0

      -
        # BuildKit (used with `docker buildx`) is the best way to build images
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      -
        # This makes image builds fast!
        name: Cache Docker layers
        uses: actions/cache@v2.1.6
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-build-cache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-cache

      -
        name: Get version
        id: get_version
        run: |
          VERSION="latest"
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo '::set-output name=version::${VERSION}'
      -
        name: Get image tags
        id: image_tags
        run: |
          TAGS="${{ secrets.DOCKERHUB_IMAGE }}::${{ steps.get_version.outputs.version }},${{ secrets.DOCKERHUB_IMAGE }}:latest"
          echo '::set-output name=tags::${TAGS}'
      
      - 
        name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          target: prod
          platforms: linux/amd64,linux/arm64
          builder: ${{ steps.buildx.outputs.name }}
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          tags: ${{ steps.image_tags.outputs.tags }}

        # This ugly bit is necessary if you don't want your cache to grow forever
        # till it hits GitHub's limit of 5GB.
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache - Build and push
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  
    deploy:
      name: "Deploy"
      runs-on: ubuntu-latest
      needs: build-push
      steps:
        - name: Configure SSH
          run: |
            mkdir -p ~/.ssh/
            echo "$SSH_KEY" > ~/.ssh/deploy.key
            chmod 600 ~/.ssh/deploy.key
            cat >>~/.ssh/config <<END
            Host prod
              HostName $SSH_HOST
              User $SSH_USER
              IdentityFile ~/.ssh/deploy.key
              StrictHostKeyChecking no
            END
          env:
            SSH_USER: ${{ secrets.DEPLOY_SSH_USER }}
            SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
            SSH_HOST: ${{ secrets.DEPLOY_SSH_HOST }}

        - name: Trigger a service update
          run: ssh prod 'docker service update --image ${{ secrets.DOCKERHUB_IMAGE }}:${{ steps.get_version.outputs.version }} movie-app'